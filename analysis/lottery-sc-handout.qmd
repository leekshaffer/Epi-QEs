---
title: "Synthetic Control Analysis: COVID-19 Vaccine Lotteries"
author: "Lee Kennedy-Shaffer, PhD"
format: html
editor: visual
---

## Setting and Data

There are several published analyses of the effect of COVID-19 vaccine lotteries in the U.S. We use the data and analysis based on that by [Lang et al. (2023)](https://doi.org/10.1017/XPS.2021.32). The replication files that are used are available through [Harvard Dataverse](https://doi.org/10.7910/DVN/QYXN9L).

[Fuller et al. (2022)](https://doi.org/10.1371/journal.pone.0274374) conducted a multiple-state analysis using the synthetic control, and have data available on [Harvard Dataverse](https://doi.org/10.7910/DVN/K1XX02) as well. Other analyses include [Sehgal (2021)](https://doi.org/10.1016/j.amjmed.2021.06.032) and [Brehm et al. (2022)](https://doi.org/10.1086/718512).

Focusing on the Ohio Vax-A-Million lottery, we explore whether the lottery incentive, which was announced on May 12, 2021, had a noticeable impact on Ohio's vaccination rates. The outcome considered is the percentage of the adult population fully vaccinated for COVID-19; note that the lottery only required a first dose for entry.

The outcome data were obtained by Lang et al. from Our World In Data's database, which draws from CDC reports. The relevant data for our analyses are in `lottery_lang.Rda`. `lang_0624` contains weekly case, vaccination, and death numbers by state, along with indicators and week numbers for any states that implemented their own lottery. These data are complete through late June 2021 (used in the main analysis in the publication), while `lang_0912` extends the data through mid-September. `lang_ann_dates` has announcement dates and notes on lotteries in various states. Note that the data used by Fuller et al. are available in `lottery_fuller.Rda` for comparison.

First, load the data into R.

```{r}
load(file="../data/lottery_lang.Rda")
```

## Libraries

Again, we will use `tidyverse` and `knitr` for general coding. Several packages are available for synthetic control fitting, including: [`Synth`](https://doi.org/10.18637/jss.v042.i13), developed by the original authors of Abadie et al. (2010); [`gsynth`](https://github.com/xuyiqing/gsynth), which implements the generalized SC method; and [`microsynth`](https://doi.org/10.18637/jss.v097.i02), which allows for disaggregated, micro-level data. We will use two others:

1.  [`tidysynth`](https://github.com/edunford/tidysynth), which has a more user-friendly, tidyverse-style implementation of SC; and

2.  [`augsynth`](https://github.com/ebenmichael/augsynth), which additionally allows for Augmented SC (to be discussed later) and staggered adoption SC. For the most recent version of `R`, this has to be installed from GitHub using the `devtools` package.

We now load the required libraries.

```{r}
#| output: false
## If you have not installed these packages before,
##  run the following line:
# install.packages(c("tidysynth","devtools"))
## Either way, require the libraries:
require(tidyverse)
require(knitr)
require(tidysynth)
require(devtools)
## If augsynth has not yet been installed, run the following line:
# devtools::install_github("ebenmichael/augsynth")
require(augsynth)
```

## Graphical Exploration

We begin by plotting the time series for visual inspection. First, we plot the percent fully vaccinated over time, up to late June 2021.

```{r}
## We first save the annnouncement date for Ohio's lottery:
Ohio_ann <- lang_ann_dates %>% dplyr::filter(state=="OH") %>%
  pull(lott_date)
## Plot time series of mandates themselves:
#| fig-cap: "Plot of fully vaccinated percentages by state and lottery status, January–June 2021"
#| fig-alt: "A line plot with line for each state over the time range specified. Ohio is highlighted and generally in the middle of the range."
ggplot(data=lang_0624,
       mapping=aes(group=state,linetype=type,color=type,alpha=type,
                   x=last_day,y=people_fully_vaccinated_per_hundred)) +
  scale_alpha_manual(name=NULL, breaks=c("Ohio","Other Lottery State","Non-Lottery State"),
                     values=c(1,0.8,0.5)) +
  geom_line() + theme_bw() +
  geom_vline(xintercept=Ohio_ann, linetype="dotted") +
  labs(x="Day (2021)", y="Percent Fully Vaccinated",
       linetype=NULL,color=NULL)
```

We can do the same with the larger data set to see if there are later time patterns that should be explored.

```{r}
#| fig-cap: "Plot of fully vaccinated percentages by state and lottery status, January–September 2021"
#| fig-alt: "A line plot with line for each state over the time range specified. Ohio is highlighted and generally in the middle of the range."
ggplot(data=lang_0912,
       mapping=aes(group=state,linetype=type,color=type,alpha=type,
                   x=last_day,y=people_fully_vaccinated_per_hundred)) +
  scale_alpha_manual(name=NULL, breaks=c("Ohio","Other Lottery State","Non-Lottery State"),
                     values=c(1,0.8,0.5)) +
  geom_line() + theme_bw() +
  geom_vline(xintercept=Ohio_ann, linetype="dotted") +
  labs(x="Day (2021)", y="Percent Fully Vaccinated",
       linetype=NULL,color=NULL)
```

We can also plot Ohio versus the average outcome of the other states, grouped by whether they had a lottery.

```{r}
## Create data set that averages across states within each group:
lang_avg <- lang_0624 %>% group_by(type,week,last_day) %>%
  dplyr::summarize(full_vax_avg=mean(people_fully_vaccinated_per_hundred, 
                                     na.rm=TRUE))
```

```{r}
#| fig-cap: "Plot of average fully vaccinated percentages by lottery status, January–June 2021. Note the mean is computed across states, not weighted by population."
#| fig-alt: "A line plot with line for each of Ohio, Other Lottery States (Mean), and Non-Lottery States (Mean) over the time range specified. Ohio increases more slowly than the other two until mid-April, then much more quickly until early May, then more slowly again. Other Lottery States appears to increase more quickly than Non-Lottery States both before and after Ohio's lottery announcement."
ggplot(data=lang_avg,
       mapping=aes(linetype=type,color=type,alpha=type,
                   x=last_day,y=full_vax_avg)) +
  geom_line(linewidth=1.3) + theme_bw() +
  scale_alpha_manual(name=NULL, 
                     breaks=c("Ohio","Other Lottery State",
                              "Non-Lottery State"),
                     labels=c("Ohio","Other Lottery States (Mean)",
                              "Non-Lottery States (Mean)"),
                     values=c(1,0.8,0.5)) +
  scale_linetype_manual(name=NULL,
                        breaks=c("Ohio","Other Lottery State",
                              "Non-Lottery State"),
                        labels=c("Ohio","Other Lottery States (Mean)",
                              "Non-Lottery States (Mean)"),
                        values=c("solid","dotted","dashed")) +
  scale_color_manual(name=NULL,
                     breaks=c("Ohio","Other Lottery State",
                              "Non-Lottery State"),
                     labels=c("Ohio","Other Lottery States (Mean)",
                              "Non-Lottery States (Mean)"),
                     values=c("red","forestgreen","blue")) +
  geom_vline(xintercept=Ohio_ann, linetype="dotted") +
  labs(x="Day (2021)", y="Percent Fully Vaccinated")
```

## Discussion Questions

1.  Does the above plot indicate that parallel trends would be reasonable?

2.  On visual inspection, does it appear that the lottery was effective?

## Synthetic Control

### Fit Model

We will fit the synthetic control for Ohio, using only non-lottery states as the potential control units. For now, we will use only the pre-intervention time periods as predictors, ignoring any other covariates, and optimize the fit over the full pre-intervention window. We use the `synthetic_control` function from the `tidysynth` package. Note that this may take a minute or two to run.

```{r}
## Conduct SC analysis for Ohio, excluding other lottery states:
synth_ohio <- lang_0624 %>% dplyr::filter(type != "Other Lottery State") %>%
  ## initialize SC object by specifying outcome, unit variable, time variable, 
  ### and when/where intervention turns on:
  synthetic_control(outcome=people_fully_vaccinated_per_hundred,
                    unit=state,
                    time=centered_week,
                    i_unit="OH",
                    i_time=0,
                    generate_placebos=T) %>%
  ## create predictors for SC model:
  generate_predictor(time_window=-17,lag17=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-16,lag16=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-15,lag15=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-14,lag14=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-13,lag13=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-12,lag12=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-11,lag11=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-10,lag10=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-9,lag09=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-8,lag08=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-7,lag07=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-6,lag06=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-5,lag05=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-4,lag04=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-3,lag03=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-2,lag02=people_fully_vaccinated_per_hundred) %>%
  generate_predictor(time_window=-1,lag01=people_fully_vaccinated_per_hundred) %>%
  ## generate SC weights:
  generate_weights(optimization_window=(-17):(-1),
                   margin_ipop = .02,sigf_ipop = 7,bound_ipop = 6) %>%
  ## run SC:
  generate_control()
```

The `synth_ohio` object contains all of the information about the fit. `tidysynth` provides many functions to pull the results for inspection.

### Inspect Fit

We can investigate the weights given to different control units and variables:

```{r}
## Pull weights and print in descending order
synth_ohio %>% grab_unit_weights() %>% 
  dplyr::filter(weight > 0.001) %>% dplyr::arrange(desc(weight))
```

```{r}
## Plot the weights for control units and variables.
#| fig-cap: "Control unit and variable weights for synthetic control fit of Ohio's fully vaccinated percentage prior to the lottery implementation, May 12, 2021."
#| fig-alt: "Left: bar plot of control unit weights. The positive weights are only for Kansas (0.256), Wisconsin (0.192), Virginia (0.173), Georgia (0.168), Iowa (0.066), Hawaii (0.061), Pennsylvania (0.056), and Connecticut (0.029). Right: bar plot of variable weights, from lag01 down to lag17. The weight on lag01 is above 0.20, falling roughly exponentially to about 0 for lag17."
## Plot weights on control units and variables:
synth_ohio %>% plot_weights()
```

The top four control states by weight are Kansas, Wisconsin, Viriginia, and Georgia. **Do these seem reasonable?** The variables are given weight in reverse chronological order: **does this make sense for minimizing pre-intervention MSPE?**

We can also examine the pre-intervention fit directly between true Ohio, synthetic Ohio, and the average of the donor pool.

```{r}
## Examine fit:
synth_ohio %>% grab_balance_table()
```

### Plot Results

We can plot both the observed and synthetic time series themselves, and the gap between them.

```{r}
#| fig-cap: "Time series of observed and synthetic Ohio's percent fully vaccinated rate by week (centered at lottery announcement date, May 12, 2021)."
#| fig-alt: "Line plot with series Observed and Synthetic. Both move relatively closely together until the vertical line indicating the time of the intervention, at which point the observed diverges below the synthetic by around 1–2 percentage points."
synth_ohio %>% plot_trends() +
  labs(x="Weeks from Lottery Announcement",
       y="Percent Fully Vaccinated",
       title=NULL) +
  theme_bw()
```

```{r}
#| fig-cap: "Time series of the difference, Observed – Synthetic Ohio, in percent fully vaccinated rate by week (centered at lottery announcement date, May 12, 2021)."
#| fig-alt: "Line plot that fluctuates near 0 from Week -17 to -6, is at -0.6 at Week -5, between -0.25 and 0.3 from Weeks -4 to -2, and then decreases steadily to -1.25 at Week 3 and stays near there until Week 6."
synth_ohio %>% plot_differences() +
  labs(x="Weeks from Lottery Announcement",
       y="Difference in Percent Fully Vaccinated, Observed–Synthetic",
       title=NULL) +
  theme_bw()
```

### Inference

Placebo in-space tests are conducted by default in `synthetic_control` and can be plotted. The default plot prunes those with pre-intervention square root of the MSPE values above twice the value for the actual analysis, but this can be turned off with `prune=FALSE`.

```{r}
#| fig-cap: "Actual and placebo synthetic control gaps in percent fully vaccinated rate by week (centered at lottery announcement date, May 12, 2021), excluding placebos with high pre-intervention MSPE values."
#| fig-alt: "Line plot for gap between observed and synthetic Ohio shown above, supplemented with lines for various placebo synthetic control time series. About half of the placebos have generally positive post-intervention gaps and half are generally negative, with actual Ohio near the middle of the negative ones."
synth_ohio %>% plot_placebos() +
  labs(x="Weeks from Lottery Announcement",
       y="Difference in Percent Fully Vaccinated, Observed–Synthetic",
       title=NULL) +
  theme_bw()
```

```{r}
#| fig-cap: "Actual and placebo synthetic control gaps in percent fully vaccinated rate by week (centered at lottery announcement date, May 12, 2021), all placebos."
#| fig-alt: "Line plot for gap between observed and synthetic Ohio shown above, supplemented with lines for various placebo synthetic control time series. About half of the placebos have generally positive post-intervention gaps and half are generally negative, with actual Ohio at about one-third of the magnitude of the range of the negative ones. Compared to the previous plot, there are several much more extreme gap time series."
synth_ohio %>% plot_placebos(prune=FALSE) +
  labs(x="Weeks from Lottery Announcement",
       y="Difference in Percent Fully Vaccinated, Observed–Synthetic",
       title=NULL) +
  theme_bw()
```

One measure of the reliability of the results is to compare the post-intervention MSPE to the pre-intervention MSPE. The result for the actual analysis can be compared to the distribution of the placebo analyses.

```{r}
#| fig-cap: "Ratio of the pre- and post-intervention MSPE, actual and placebo synthetic control analysis"
#| fig-alt: "Bar plot for various states in the Donor group and the Treated state of Ohio. The largest Post-Period MSPE/Pre-Period MSPE occurs in New Hampshire, at a value around 340. Ohio has a value near the middle of the distribution, around 27, while the smallest, Wyoming, is around 0."
synth_ohio %>% plot_mspe_ratio() +
  labs(title=NULL) +
  theme_bw()
```

An exact p-value can be computed from this distribution, by observing how many control units have as or more extreme ratios. This is done in the fit function and can be accessed using `grab_significance`.

```{r}
## Get all pre- and post-intervention MSPEs, ratios, and ranks:
synth_ohio %>% grab_significance()
## Get pre- and post-intervention MSPEs, ratio, and p-value 
### for actual treated unit(s) only:
synth_ohio %>% grab_significance() %>%
  dplyr::filter(type=="Treated")
```

A similar exact p-value can be computed using any other estimator. We can get this by pulling the results at each time point using `grab_synthetic_control()`. We then compare the actual estimate to the placebo estimates.

```{r}
## Pull the synthetic control results for each time point:
SC_res <- synth_ohio %>% grab_synthetic_control(placebo=TRUE) %>%
  mutate(diff=real_y-synth_y)
SC_res

## For each time period, compute a permutation p-value
time_an <- function(time) {
  SC_res_time <- SC_res %>% dplyr::filter(time_unit==time)
  Est <- SC_res_time %>% dplyr::filter(.placebo==0) %>% pull(diff)
  P.Val <- mean(abs(SC_res_time %>% pull(diff)) >= abs(Est))
  return(c(time_unit=time,estimate=Est,p.value=P.Val))
}
by_time_res <- as_tibble(t(sapply(X=unique(SC_res %>% pull(time_unit)),
                                  FUN=time_an)))
by_time_res
```

We can plot these placebo test p-values as well:

```{r}
#| fig-cap: "Placebo test p-value for estimate at each week"
#| fig-alt: "Scatter plot of Placebo Test P-Values vs. Weeks from Lottery Announcement. The points are scattered generally between 0.5 and 1."
ggplot(data=by_time_res) +
  geom_point(mapping=aes(x=time_unit, y=p.value), size=1.5) +
  theme_bw() +
  geom_hline(yintercept=0.05, color="red", 
             linetype="dotted", size=1.3) +
  geom_vline(xintercept=0, linetype="dotted", 
             linewidth=1.3) +
  scale_y_continuous(limits=c(0,1), expand=expansion(),
                     breaks=seq(0,1,by=0.2)) +
  labs(title=NULL,
       x="Weeks from Lottery Announcement",
       y="Placebo Test P-Values")
```

## Discussion Questions

1.  How would you interpret these results?

2.  Would other specifications (outcomes, scales, etc.) be more convincing or conducive to answering the question?

3.  Do the key assumptions for SC seem reasonable here? Why or why not?

## Additional Analysis: Incorporating Covariates

We can try another specification that incorporates some covariates other than the pre-intervention outcome itself. We will incorporate total COVID-19 cases and deaths and average daily vaccinations (per million population) in the week prior to the announcement, as well as the average weekly case and death rates in the prior month. To avoid overfitting, we will average together every four weeks of pre-intervention outcome data as covariates, but optimize covariate weights on the full pre-treatment trajectory.

```{r}
## Create synthetic control fit with covariates:
synth_oh_cov <- lang_0624 %>% dplyr::filter(type != "Other Lottery State") %>%
  ## initialize SC object by specifying outcome, unit variable, time variable, 
  ### and when/where intervention turns on:
  synthetic_control(outcome=people_fully_vaccinated_per_hundred,
                    unit=state,
                    time=centered_week,
                    i_unit="OH",
                    i_time=0,
                    generate_placebos=T) %>%
  ## create predictors for SC model:
  ### four-week groups for outcome:
  generate_predictor(time_window=-17:-14,lag17_14=mean(people_fully_vaccinated_per_hundred, 
                                                       na.rm=TRUE)) %>%
  generate_predictor(time_window=-13:-10,lag13_10=mean(people_fully_vaccinated_per_hundred, 
                                                       na.rm=TRUE)) %>%
  generate_predictor(time_window=-9:-6,lag9_6=mean(people_fully_vaccinated_per_hundred, 
                                                   na.rm=TRUE)) %>%
  generate_predictor(time_window=-5:-2,lag5_2=mean(people_fully_vaccinated_per_hundred, 
                                                   na.rm=TRUE)) %>%
  ### outcome, case rate, death rate, and vaccination rate in week prior:
  generate_predictor(time_window=-1,
                     lag01=people_fully_vaccinated_per_hundred,
                     total_cases=tot_cases_per_million,
                     total_deaths=tot_death_per_million,
                     vax_rate=daily_vaccinations_per_million) %>%
  ### four previous week average for cases and deaths:
  generate_predictor(time_window=-5:-2,
                     recent_cases=mean(new_case_per_million, 
                                       na.rm=TRUE),
                     recent_deaths=mean(new_death_per_million, 
                                        na.rm=TRUE)) %>%
  ## generate SC weights on same optimization window:
  generate_weights(optimization_window=-17:-1,
                   margin_ipop = .02,sigf_ipop = 7,bound_ipop = 6) %>%
  ## run SC:
  generate_control()

### Examine fit and results:
synth_oh_cov %>% plot_weights()
synth_oh_cov %>% grab_balance_table()
synth_oh_cov %>% plot_trends()
synth_oh_cov %>% plot_differences()
synth_oh_cov %>% plot_placebos()
synth_oh_cov %>% grab_significance() %>% 
  dplyr::filter(type=="Treated")
```

This specification has a slightly higher pre-intervention MSPE (`r round(synth_oh_cov %>% grab_significance %>% dplyr::filter(type=="Treated") %>% pull(pre_mspe), digits=3)` compared to `r round(synth_ohio %>% grab_significance %>% dplyr::filter(type=="Treated") %>% pull(pre_mspe), digits=3)` in the initial specification), but gives an estimated effect nearly indistinguishable from 0. The control unit weights are somewhat changed, but the variable weights still place the vast majority of weight on pre-intervention outcomes.

## Augmented Synthetic Control

### Using `augsynth` Function

We can re-fit the Ohio SC analysis using the `augsynth` function from the `augsynth` package. By default this package uses all pre-treatment outcome variables as the predictors.

```{r}
### First, create a dataset with a treatment indicator:
OH_data <- lang_0624 %>% 
  dplyr::filter(type2 %in% c("Ohio","Non-Lottery State")) %>%
  mutate(treated=if_else(state=="OH" & rel_week >= 0,1,0))
### Then, run the augsynth function:
OH_as <- augsynth(form=people_fully_vaccinated_per_hundred~treated, # outcome~treatment
                  unit=stateF, # units, as a factor variable
                  time=week, # time period variable
                  data=OH_data, # data set
                  progfunc="None", # fits without any outcome model
                  scm=TRUE, # fits with SC weighting
                  fixedeff=FALSE) # fits without de-meaning/intercepts
## Prints average ATT estimate in post-intervention periods:
OH_as
## Prints estimate for each time period with conformal inference CI:
summary(OH_as)
```

We can then compare the original SC fit from the `tidysynth` package to the `augsynth` fit with SC on but outcome model and fixed effects off. Note that the `augsynth` plot calls can take a minute to run.

```{r}
## The original SC fit from the tidysynth package:
#| fig-cap: "Time series of the difference, Observed – Synthetic Ohio, in percent fully vaccinated rate by week (centered at lottery announcement date, May 12, 2021)."
#| fig-alt: "Line plot that fluctuates near 0 from Week -17 to -6, is at -0.6 at Week -5, between -0.25 and 0.3 from Weeks -4 to -2, and then decreases steadily to -1.25 at Week 3 and stays near there until Week 6."
synth_ohio %>% plot_differences() +
  labs(x="Weeks from Lottery Announcement",
       y="Difference in Percent Fully Vaccinated, Observed–Synthetic",
       title=NULL) +
  theme_bw()
```

```{r}
## The new SC fit from the augsynth package:
#| fig-cap: "Time series of the difference, Observed – Synthetic Ohio, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that is the same as the previous plot, except the x-axis goes from 0 to 25, with a vertical line at 19."
plot(OH_as, 
     inf=FALSE) # Suppresses plotting of conformal inference CIs
```

These plots give the same results!

In both cases, the pre-treatment fit is fairly good but not exact. We can alter the options to see different results.

We can try a ridge outcome model first:

```{r}
### Run the augsynth fit with a ridge outcome model and SC
OH_as_r <- augsynth(form=people_fully_vaccinated_per_hundred~treated, # outcome~treatment
                  unit=stateF, # units, as a factor variable
                  time=week, # time period variable
                  data=OH_data, # data set
                  progfunc="Ridge", # fits with ridge outcome model
                  scm=TRUE, # fits with SC weighting
                  fixedeff=FALSE) # fits without de-meaning/intercepts
## Prints average ATT estimate in post-intervention periods:
OH_as_r
```

```{r}
## The ridge-adjusted SC fit from the augsynth package:
#| fig-cap: "Time series of the difference, Observed – Ridge-adjusted Synthetic Ohio, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that is very similar to the previous plot."
plot(OH_as_r, 
     inf=FALSE) # Suppresses plotting of conformal inference CIs
```

This is very similar to the previous fit. We can try adding unit fixed effects (de-mean or intercept-shifted SC) instead:

```{r}
### Run the augsynth fit with fixed effects and no outcome model
OH_as_fe <- augsynth(form=people_fully_vaccinated_per_hundred~treated, # outcome~treatment
                  unit=stateF, # units, as a factor variable
                  time=week, # time period variable
                  data=OH_data, # data set
                  progfunc="None", # fits without outcome model
                  scm=TRUE, # fits with SC weighting
                  fixedeff=TRUE) # fits with de-meaning/intercepts
## Prints average ATT estimate in post-intervention periods:
OH_as_fe
```

```{r}
## The de-meaned SC fit from the augsynth package:
#| fig-cap: "Time series of the difference, Observed – de-meaned Synthetic Ohio, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that fluctuates near 0, never exceeding 0.5 in either direction, from Week 0 to 18, and then steadily decreases to around -2 in Week 22 and stays around there through Week 25."
plot(OH_as_fe, 
     inf=FALSE) # Suppresses plotting of conformal inference CIs
```

Some of the fluctuations are smoothed out here, as the SC fit is just matching the time trend without needing to match the level of the pre-intervention outcome. This produces a smoother and larger estimate of the intervention effect. However, this requires a different assumption: that matching de-meaned outcomes pre-intervention leads to stable weights.

### Analysis of Other States

As we saw, both New Mexico and Maine implemented lotteries, but may be outside of the "convex hull" condition required for SC.

```{r}
#| fig-cap: "Plot of percent fully vaccinated rates by U.S. state, Jan.-Sept. 2021"
#| fig-alt: "Line plot with several Other Lottery States and Non-Lottery States, as well as three focused states: Ohio, New Mexico, and Maine. Maine is in the middle of the set of lines, while New Mexico is among the highest early on, and Maine is among the highest in May/June."
ggplot(data=lang_0624,
       mapping=aes(group=state, linetype=type2, color=type2,
                   alpha=type2, linewidth=type2,
                   x=last_day,y=people_fully_vaccinated_per_hundred)) +
  scale_alpha_manual(name=NULL, breaks=c("Ohio","New Mexico","Maine",
                                         "Other Lottery State",
                                         "Non-Lottery State"),
                     values=c(1,1,1,0.5,0.8)) + 
  scale_linewidth_manual(name=NULL, breaks=c("Ohio","New Mexico","Maine",
                                         "Other Lottery State",
                                         "Non-Lottery State"),
                         values=c(1.3,1.3,1.3,1,1)) +
  geom_line() + theme_bw() +
  geom_vline(data=lang_0624 %>% 
               dplyr::filter(type2 %in% c("Ohio","New Mexico","Maine"),
                                              rel_week==0),
             mapping=aes(xintercept=lott_date, group=type2, color=type2),
             linetype="dotted") +
  labs(x="Day (2021)", y="Percent Fully Vaccinated",
       linetype=NULL,color=NULL)
```

We can create data sets for both New Mexico and Maine, and then fit various SC models.

```{r}
## Create data set for New Mexico as treated unit:
NM_data <- lang_0624 %>% 
  dplyr::filter(type2 %in% c("New Mexico","Non-Lottery State")) %>%
  mutate(treated=if_else(state=="NM" & rel_week >= 0,1,0))
## Create data set for Maine as treated unit:
ME_data <- lang_0624 %>% 
  dplyr::filter(type2 %in% c("Maine","Non-Lottery State")) %>%
  mutate(treated=if_else(state=="ME" & rel_week >= 0,1,0))

## Fit standard SCs using augsynth:
NM_as <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=NM_data,
                  progfunc="None", scm=TRUE, fixedeff=FALSE)
ME_as <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=ME_data,
                  progfunc="None", scm=TRUE, fixedeff=FALSE)
```

Starting with New Mexico, we can plot the standard SC and see the weights it gives:

```{r}
#| fig-cap: "Time series of the difference, Observed – Synthetic New Mexico, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that fluctuates greatly, from around -0.3 to 2.5, until a vertical line at Week 22, and then remains in the 0.4 to 1.2 range through Week 25."
plot(NM_as, 
     inf=FALSE)
```

```{r}
## Create a data set with the weights and sort largest to smallest in absolute value.
NM_as_w <- tibble(State=rownames(NM_as$weights),
                  Weight=NM_as$weights[,1]) %>%
  arrange(desc(abs(Weight)))
## Print results:
NM_as_w
```

Clearly, the pre-treatment fit is poor here, and the synthetic control is underestimating the true outcome value because New Mexico had very high vaccination rates even before the intervention. Note that some weights appear negative but essentially round to 0.

Adding a fixed effects term will be able to center the pre-treatment fit closer to zero.

```{r}
## Fit de-meaned SC using augsynth:
NM_as_fe <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=NM_data,
                  progfunc="None", scm=TRUE, fixedeff=TRUE)
```

```{r}
#| fig-cap: "Time series of the difference, Observed – De-meaned Synthetic New Mexico, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that fluctuates from around -1 to 1, until a vertical line at Week 22, and then remains in the 0.7 to 1.5 range through Week 25."
plot(NM_as_fe, 
     inf=FALSE)
```

We can print the weights that come from the de-meaned SC fit. Notice there are meaningful differences from the standard SC fit weights.

```{r}
## Create a data set with the weights and sort largest to smallest in absolute value.
NM_as_fe_w <- tibble(State=rownames(NM_as_fe$weights),
                  Weight=NM_as_fe$weights[,1]) %>%
  arrange(desc(abs(Weight)))
## Print results:
NM_as_fe_w
```

There remain large fluctuations in the pre-treatment fit. A ridge outcome model may be able to de-bias these fluctuations.

```{r}
## Fit ridge-adjusted SC using augsynth:
NM_as_r <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=NM_data,
                  progfunc="Ridge", scm=TRUE, fixedeff=FALSE)
```

```{r}
#| fig-cap: "Time series of the difference, Observed – Ridge-adjusted Synthetic New Mexico, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that fluctuates from around -0.05 to 0.05, until a vertical line at Week 22, and then rises quickly to just above 1 at Week 24 and remains there through Week 25."
plot(NM_as_r, 
     inf=FALSE)
```

We can print the weights that come from the ridge-augmented SC fit. Notice there are meaningful differences from the previous weights and now there are states that get non-negligible negative weights.

```{r}
## Create a data set with the weights and sort largest to smallest in absolute value.
NM_as_r_w <- tibble(State=rownames(NM_as_r$weights),
                  Weight=NM_as_r$weights[,1]) %>%
  arrange(desc(abs(Weight)))
## Print results:
NM_as_r_w
```

Turning now to Maine, we can plot the standard SC:

```{r}
#| fig-cap: "Time series of the difference, Observed – Synthetic Maine, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that fluctuates greatly, from around -2 to 1, until a vertical line at Week 24, and then is around -0.25 at Week 25."
plot(ME_as, 
     inf=FALSE)
```

Clearly, again, the pre-treatment fit is poor, with overestimation early on and underestimation closer to the start of treatment.

Since the pre-treatment gaps are roughly centered around 0, adding a fixed effects term will not have much effect.

```{r}
## Fit de-meaned SC using augsynth:
ME_as_fe <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=ME_data,
                  progfunc="None", scm=TRUE, fixedeff=TRUE)
```

```{r}
#| fig-cap: "Time series of the difference, Observed – De-meaned Synthetic Maine, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that looks very similar to the previous plot."
plot(ME_as_fe, 
     inf=FALSE)
```

A ridge outcome model may be more useful here to de-bias the fluctuations.

```{r}
## Fit ridge-adjusted SC using augsynth:
ME_as_r <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=ME_data,
                  progfunc="Ridge", scm=TRUE, fixedeff=FALSE)
```

```{r}
#| fig-cap: "Time series of the difference, Observed – Ridge-adjusted Synthetic Maine, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that fluctuates greatly, from around -1.3 to 1, with peaks getting smaller as Week goes toward 22, is at -0.25 in Week 23, -0.6 in Week 24 and -0.5 in Week 25."
plot(ME_as_r, 
     inf=FALSE)
```

The ridge adjustment may be more useful if it is not capturing the fixed effects as well, so we can use both unit fixed effects and a ridge outcome model.

```{r}
## Fit de-meaned and ridge-adjusted SC using augsynth:
ME_as_r_fe <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=ME_data,
                  progfunc="Ridge", scm=TRUE, fixedeff=TRUE)
```

```{r}
#| fig-cap: "Time series of the difference, Observed – De-meaned and Ridge-adjusted Synthetic Maine, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that is at almost exactly 0 through Week 23, and then around -0.9 and -0.6 in Weeks 24 and 25, respectively."
plot(ME_as_r_fe, 
     inf=FALSE)
```

Clearly, this achieves an excellent pre-treatment fit, but it may in fact be over-fitting the data. The assumptions should be carefully considered in this model.

Another option is to fit the generalized SCM using the `gsynth` package. We first need to install and load the package.

```{r}
# install.packages("gsynth") # Run once if not yet installed
library(gsynth)

## Then we can fit the model using the GSYN option for progfunc:
ME_gsynth <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                  unit=stateF,
                  time=week,
                  data=ME_data,
                  progfunc="GSYN")
```

```{r}
#| warning: false
#| fig-cap: "Time series of the difference, Observed – Generalized Synthetic Maine, in percent fully vaccinated rate by week, starting from the week ending 1/17/21."
#| fig-alt: "Line plot that fluctuates greatly, from around -2 to 1, until a vertical line at Week 24, and then is around -1.5 and -1.2 at Weeks 24 and 25, respectively."
plot(ME_gsynth, 
     inf=FALSE)
```

Again, different assumptions are being made here, and should be carefully considered. This appears more similar to the initial SC fit, however it has a larger effect estimate.

## Discussion Questions

1.  Are the trade-offs of ASCM worthwhile for these other states?

## Staggered Adoption

Finally, we can consider the multi-period, multi-unit staggered adoption case with the augmented synthetic control. We first set up the full data set by adding a treatment indicator variable, and then fit it using `augsynth`. Note that this defaults to including two-way fixed effects, balancing all pre-intervention periods, and partially pools the average and individual SC fits using the heuristic given by [Ben-Michael et al. (2022)](https://doi.org/10.1111/rssb.12448).

```{r}
## Create data set with indicator for treatment
Mult_data <- lang_0624 %>% 
  mutate(treated=if_else(!lottery,0,if_else(rel_week>=0,1,0)))
## Fit augmented SC on full data set:
Mult_as <- augsynth(form=people_fully_vaccinated_per_hundred~treated,
                    unit=stateF,
                    time=week,
                    data=Mult_data)
## Print results and summary:
Mult_as
summary(Mult_as)
```

The average effect is estimated to be -0.170, increasing from -0.115 in the first treated period to -0.224 in the second, although there are large standard errors throughout. We can plot the fit, which defaults to plotting all individual fits and the average:

```{r}
#| fig-cap: "Time series of the difference in fully vaccinated percentage using staggered adoption synthetic control estimates for treated states, by time relative to intervention."
#| fig-alt: "Line plot with lines for 15 states, generally fluctuating between -1.25 and 1.25 prior to Week 0, and then expanding outward to a range of around -3 (New York) to 2.4 (Oregon) in Week 1. A darker average line is fairly close to 0 throughout"
plot(Mult_as)
```
