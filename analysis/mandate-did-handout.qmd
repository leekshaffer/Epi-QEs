---
title: "Staggered Adoption DID Analysis: COVID-19 Vaccine Mandates"
author: "Lee Kennedy-Shaffer, PhD"
format: html
editor: visual
---

## Setting and Data

The concept of this analysis is based on that in [Rains and Richards (2024)](https://doi.org/10.1073/pnas.2313610121). The authors seek to understand the effect of COVID-19 vaccine mandates for state employees, which were implemented in 20 U.S. states, beginning on different dates in August–October 2021 ([Ballotpedia](https://ballotpedia.org/State_employee_vaccine_requirements_during_the_coronavirus_(COVID-19)_pandemic,_2021-2023)). The vaccination data used are from the [CDC's COVID Vaccination Trends](https://data.cdc.gov/Vaccinations/COVID-19-Vaccination-Trends-in-the-United-States-N/rh2h-3yt2/about_data) data set. Note that the data might vary somewhat from that in the Rains and Richards (2024) [replication files](https://doi.org/10.1073/pnas.2313610121).

The goal of the analysis is to test the hypothesis that the state mandates increased either the number of first vaccinations in the state or the proportion of the state's adult population that was fully vaccinated. Although not used by Rains and Richards (2024), we use non-mandate states as controls.

The data are available in the `mandate.Rda` file. `Vax_weekly` contains the full data set, by state and summarized by MMWR week, for January 2021 through May 2023, for two variables: `SCP` has the proportion of the adult population that has a complete vaccination series and `D1P` has the proportion of the adult population with at least one dose. The weekly increments are in the `_diff` variables. Information on the mandate for each start are in the `Mandate_Start`, `ever_mandate`, and `mandate` variables, and lead/lag information by week is in `Wks_mandate` and `LeadLag`.

First, load the data into R.

```{r}
load(file="../data/mandate.Rda")
```

## Libraries

Again, we will use `tidyverse` and `knitr` for general coding and `lme4` for clustered TWFE models. [Roth et al. (2023)](https://doi.org/10.1016/j.jeconom.2023.03.008) has a summary table with `R` packages that implement advanced DID methods. We will use three of them:

1.  `bacondecomp` implements the decomposition from [Goodman-Bacon (2021)](https://doi.org/10.1016/j.jeconom.2021.03.014);

2.  `did2s`, described in [Butts and Gardner (2022)](https://journal.r-project.org/articles/RJ-2022-048/RJ-2022-048.pdf), implements the two-stage DID approach of [Gardner (2021)](https://doi.org/10.48550/arXiv.2207.05943), as well as many other proposed methods including the dynamic specification of [Borusyak et al. (2024)](https://doi.org/10.1093/restud/rdae007), the IW estimator of [Sun and Abraham (2021)](https://doi.org/10.1016/j.jeconom.2020.09.006), and the aggregated approach of [Callaway and Sant'Anna (2021)](https://doi.org/10.1016/j.jeconom.2020.12.001); and

3.  `DIDmultiplegt` implements the first-difference approach of [de Chaisemartin and d'Haultfoeuille (2020)](https://doi.org/10.1257/aer.20181169). Versions of this approach that can handle a wider array of settings, laid out in [de Chaisemartin and d'Haultfoeuille (2023)](https://doi.org/10.1093/ectj/utac017) and [de Chaisemartin and d'Haultfoeiulle (2024)](https://doi.org/10.1162/rest_a_01414), along with sped-up analytic standard errors are implement in the `DIDmultiplegtDYN`, which requires Java for installation.

We now load the required libraries.

```{r}
#| output: false
## If you have not installed these packages before,
##  run the following line:
# install.packages(c("bacondecomp","did2s","DIDmultiplegt"))
## Either way, require the libraries:
require(tidyverse)
require(knitr)
require(lme4)
require(bacondecomp)
require(did2s)
require(DIDmultiplegt)
```

## Graphical Exploration

We begin by plotting the time series for visual inspection. First, we plot a timeline of the mandate times.

```{r}
## Plot time series of mandates themselves:
#| fig-cap: "Plot of state employee vaccination mandate timings, U.S. states, June 2021–February 2022"
#| fig-alt: "A bar plot with bars for each state over the time range specified, with twenty states switching from red to blue sometime between August 2021 and October 2021, and the rest remaining red throughout."
ggplot(data=Vax_weekly, mapping=aes(x=End_Date,y=State, fill=mandate)) + geom_tile() +
  scale_x_date(name="Date", date_breaks="4 weeks", expand=c(0,0),
               limits=c(as.Date("2021-06-05"),as.Date("2022-03-05")),
               date_labels="%m/%d/%y") +
  theme_bw() + guides(fill="none")
```

We can then plot the time series of the outcomes by state, noting which states implement a mandate and when.

```{r}
## Get lists of the states in the data and the states with a mandate at some point
states <- unique(Vax_weekly %>% pull(State))
mandate_states <- unique(Vax_weekly %>% 
                           dplyr::filter(mandate) %>% pull(State))
```

```{r}
## Plot time series of first-dose proportion by state:
#| fig-cap: "Plot of the proportion of U.S. adults with at least one COVID-19 vaccine dose, by state and state vaccine mandate status, June 2021–February 2022"
#| fig-alt: "A line plot with lines for each state for dates from June 2021 to February 2022, and first-dose percentages generally increasing from a range around 45–80 at the beginning to a range around 70–90 at the end."
ggplot() +
  geom_line(data=Vax_weekly %>% dplyr::filter(!(State %in% mandate_states)),
            mapping=aes(x=End_Date, y=D1P, group=State),
            color="grey50", linetype="dashed") +
  geom_line(data=Vax_weekly %>% dplyr::filter(State %in% mandate_states),
            mapping=aes(x=End_Date, y=D1P, group=State,
                        color=mandate),
            linetype="solid") +
  scale_color_manual(name="Mandate",
                       breaks=c(TRUE,FALSE),
                     values=c("blue","grey50"),
                       labels=c("Post-Mandate","Pre-/No Mandate")) +
  scale_y_continuous(name="First-Dose Percentage",limits=c(0,100), expand=c(0,0)) +
  scale_x_date(name="Date", date_breaks="6 weeks", expand=c(0,0),
               limits=c(as.Date("2021-06-05"),as.Date("2022-03-05")),
               date_labels="%m/%d/%y") +
  theme_bw()
```

Several states appear to have implausible declines or rates at 100. We can identify data errors that explain some of these peculiarities, e.g. [New Hampshire](https://www.nhpr.org/nh-news/2021-11-02/nh-covid-19-data-inaccurate), [Pennsylvania](https://wjactv.com/news/local/data-correction-drops-covid-vaccine-rates-in-pennsylvania), and [Washington](https://www.spokesman.com/stories/2021/sep/21/explaining-the-discrepancy-between-cdc-and-health-/). We will exclude these three states from the analysis, but a full analysis should examine the other states as well. We will also limit the analysis weeks to 2021, MMWR weeks 25–42 to both be more focused on timing around the implementation of mandates and exclude some data errors found at other times.

```{r}
## Exclude New Hampshire, Pennsylvania, Washington:
Vax_adj <- Vax_weekly %>% dplyr::filter(!(State %in% c("NH","PA","WA")))
## Select weeks for analysis:
Yr_Wk_Sel <- paste0("2021_",(25:42))
```

We re-plot on this adjusted group of states and weeks.

```{r}
## Plot time series of first-dose proportion by state in smaller time window:
#| fig-cap: "Plot of the proportion of U.S. adults with at least one COVID-19 vaccine dose, by state and state vaccine mandate status, July 2021–October 2021"
#| fig-alt: "A line plot with lines for each state for dates from July 2021 to October 2021, and first-dose percentages generally increasing from a range around 45–85 at the beginning to a range around 60–90 at the end."
ggplot() +
  geom_line(data=Vax_adj %>% dplyr::filter(!(State %in% mandate_states), Yr_Wk %in% Yr_Wk_Sel),
            mapping=aes(x=End_Date, y=D1P, group=State),
            color="grey50", linetype="dashed") +
  geom_line(data=Vax_adj %>% dplyr::filter(State %in% mandate_states, Yr_Wk %in% Yr_Wk_Sel),
            mapping=aes(x=End_Date, y=D1P, group=State,
                        color=mandate),
            linetype="solid") +
  scale_color_manual(name="Mandate",
                     breaks=c(TRUE,FALSE),
                     values=c("blue","grey50"),
                     labels=c("Post-Mandate","Pre-/No Mandate")) +
  scale_y_continuous(name="Full Vaccination Percentage",limits=c(0,100), expand=c(0,0)) +
  scale_x_date(name="Date", date_breaks="3 weeks", expand=c(0,0),
               limits=c(as.Date("2021-07-03"),as.Date("2021-10-24")),
               date_labels="%m/%d/%y") +
  theme_bw()
```

Similar plotting and analyses could be done on the complete series percentage by replacing `D1P` in the above code by `SCP`.

## Discussion Questions

1.  Is one outcome better suited to answering the question of interest than the other?

2.  What forms of effect heterogeneity may be present in this staggered adoption setting?

## TWFE Models

First, we fit TWFE models (using `lmer` to get clustered confidence intervals), the so-called "static" specification. We fit it once with just the fixed effects, and once adding `D1P_prior` as a covariate.

```{r}
## Fit TWFE model with no covariates:
TWFE_D1P <- lmer(D1P~factor(MMWR_week)+State+mandate+(1|State),
                      data=Vax_weekly %>% dplyr::filter(Yr_Wk %in% Yr_Wk_Sel))
## Get 95% CI:
TWFE_D1P_CI <- confint(TWFE_D1P, parm="mandateTRUE", level=0.95)
## Fit TWFE model with prior-week as covariate:
TWFE_D1P_ctrl <- lmer(D1P~D1P_prior+factor(MMWR_week)+State+mandate+(1|State),
                      data=Vax_weekly %>% dplyr::filter(Yr_Wk %in% Yr_Wk_Sel))
TWFE_D1P_ctrl_CI <- confint(TWFE_D1P_ctrl, parm="mandateTRUE", level=0.95)

## Summarize results from the two models:
TWFE_results <- tibble(Model=c("Fixed Effects Only",
                               "Fixed Effects + Prior Week Value"),
                       Estimate=format(c(summary(TWFE_D1P)$coefficients["mandateTRUE","Estimate"],
                                  summary(TWFE_D1P_ctrl)$coefficients["mandateTRUE","Estimate"]), digits=3, nsmall=3),
                       `95% CI`=c(paste(format(TWFE_D1P_CI["mandateTRUE",], digits=3, nsmall=3), collapse=", "),
                                  paste(format(TWFE_D1P_ctrl_CI["mandateTRUE",], digits=3, nsmall=3), collapse=", ")))

## Print the formatted table:
knitr::kable(TWFE_results,
             caption="Table of results from TWFE models")
```

The two models give diverging results, with fairly large confidence intervals, leading to no clear conclusion. The estimates are hard to interpret as well giving the changing circumstances of the states involved.

## Goodman-Bacon Decomposition

We can conduct the Goodman-Bacon decomposition of the TWFE model to identify the weights given to different comparisons.

```{r}
## Conduct the decomposition and print summary:
bacon <- bacon(D1P~mandate,
               data=Vax_adj %>% dplyr::filter(Yr_Wk %in% Yr_Wk_Sel),
               id_var="State",
               time_var="MMWR_week")
## Full decomposition:
bacon
```

```{r}
## Plot decomposition results:
#| fig-cap: "Goodman-Bacon decomposition plot for TWFE model with no covariates"
#| fig-alt: "Scatter plot of weight vs estimate with three types of points: Earlier vs Later Treated, with estimate values from -4.5 to 2 and weights from 0 to 0.025; Later vs Earlier Treated, with estimate values from -4 to 3 and weights from 0 to 0.02; and Treated vs Untreated, with estimate values from -5.5 to 1 and weights from 0.04 to 0.21."
ggplot(data=bacon, mapping=aes(x=estimate,y=weight,shape=type,color=type)) +
  geom_point() + theme_bw()
```

The decomposition indicates that the vast majority of the weight is on Treated vs Untreated comparisons (because of the large number of untreated units). One particular observation has a large negative estimate driving the overall estimate.

## Dynamic Specification and IW Estimator

The `event_study` function in the `did2s` package implements many proposed DID/staggered adoption methods. These can be chosen using the `estimator` option, or all can be fit by setting `estimator="all"`.

```{r}
## Run event_study function with estimator="all":
ES <- event_study(data=Vax_adj %>% dplyr::filter(Yr_Wk %in% Yr_Wk_Sel) %>%
                    left_join(Vax_weekly %>% dplyr::filter(LeadLag==0) %>% 
                                dplyr::select(State,MMWR_week) %>%
                                rename(First_Week=MMWR_week),
                              by=join_by(State)) %>%
                    left_join(tibble(State=unique(Vax_weekly %>% pull(State))) %>%
                                arrange(State) %>%
                                mutate(StateID=1:length(unique(Vax_weekly %>% pull(State)))),
                              by=join_by(State)),
                  yname="SCP",
                  idname="StateID",
                  gname="First_Week",
                  tname="MMWR_week",
                  estimator="all")
## List all results:
ES
## Pick out a specific method:
ES %>% dplyr::filter(estimator=="Borusyak, Jaravel, Spiess (2021)")
```

```{r}
## Plot the results of the various estimators:
#| fig-cap: "Event-study results from various staggered adoption methods on the effect of state employee COVID-19 vaccine mandates, event times from -16 to 12."
#| fig-alt: "Six event-study plots showing effect estimates and 95% confidence intervals at each lead/lag time from -16 to 12. The plots are labelled: TWFE, Borusyak, Jaravel, Spiess (2021), Callway and Sant'Anna (2020), Gardner (2021), Roth and Sant'Anna (2021), and Sun and Abraham (2020)."
plot_event_study(ES)
```

For easier inspection, particular estimators can be plotted alone, and the lead/lag times to show can be specified.

```{r}
## Plot the results for just the dynamic estimator:
#| fig-cap: "Event-study results using the dynamic specification described in Borusyak et al. (2021/2024) on the effect of state employee COVID-19 vaccine mandates, event times from -10 to 8."
#| fig-alt: "A single event-study plot showing effect estimates and 95% confidence intervals at each lead/lag time from -10 to 8. The event times less than 0 tend to have positive estimates with CIs crossing or nearly crossing 0, and those greater than 0 tend to have negative estimates with CIs crossing or nearly crossing 0. The CIs are narrowest near event time 0, and the estimates are closest to 0 there."
plot_event_study(ES %>% 
                   dplyr::filter(estimator=="Borusyak, Jaravel, Spiess (2021)"),
                 horizon=c(-10,8))
```

```{r}
## Plot the results for just the IW estimator:
#| fig-cap: "Event-study results using the IW Estimator from Sun and Abraham (2020) on the effect of state employee COVID-19 vaccine mandates, event times from -10 to 8."
#| fig-alt: "A single event-study plot showing effect estimates and 95% confidence intervals at each lead/lag time from -10 to 8. The event times less than 0 tend to have positive estimates with CIs crossing or nearly crossing 0, and those greater than 0 tend to have negative estimates with CIs crossing or nearly crossing 0. The CIs are narrowest near event time 0, and the estimates are closest to 0 there."
plot_event_study(ES %>% 
                   dplyr::filter(estimator=="Sun and Abraham (2020)"),
                 horizon=c(-10,8))
```

```{r}
## Plot the results for just the Callaway abnd Sant'Anna estimator:
#| fig-cap: "Event-study results using the IW Estimator from Callaway and Sant'Anna (2020) on the effect of state employee COVID-19 vaccine mandates, event times from -10 to 8."
#| fig-alt: "A single event-study plot showing effect estimates and 95% confidence intervals at each lead/lag time from -10 to 8. The event times less than 0 tend to have estimates near 0 with (mostly) fairly narrow CIs, and those greater than 0 tend to have negative estimates with wide CIs crossing or nearly crossing 0. The CIs are narrowest near event time 0, and the estimates are closest to 0 there."
plot_event_study(ES %>% 
                   dplyr::filter(estimator=="Callaway and Sant'Anna (2020)"),
                 horizon=c(-10,8))
```

## First-Difference Switching Effect

Using the `did_multiplegt` function from the `DIDmultiplegt` package, we can fit the de Chaisemartin and d'Haultfoeuille (2020) method to estimate the average treatment effect of the first period after adoption. Standard errors can be derived using the `brep` and `cluster` options, but we set it to 0 here to speed up the analysis.

```{r}
## First, we prepare a data set with a variable with the First_Week of
##  mandate for each mandate state and a unique state ID number.
Vax_firstWeek <- Vax_adj %>% 
  dplyr::filter(Yr_Wk %in% Yr_Wk_Sel) %>%
  left_join(Vax_adj %>% 
              dplyr::filter(LeadLag==0) %>% 
              dplyr::select(State,MMWR_week) %>%
              rename(First_Week=MMWR_week),
            by=join_by(State)) %>%
  left_join(tibble(State=unique(Vax_adj %>% pull(State))) %>%
              arrange(State) %>%
              mutate(StateID=1:length(unique(Vax_adj %>% pull(State)))),
            by=join_by(State))
## Run analysis method:
dCdH <- did_multiplegt(df=Vax_firstWeek,
                       Y="D1P",
                       G="StateID",
                       T="MMWR_week",
                       D="mandate",
                       placebo=10,
                       dynamic=7,
                       brep=0,
                       cluster="StateID")
## See full results:
dCdH
```

The treatment effect estimate is `r format(dCdH$effect["treatment"], digits=3, nsmall=3)`. We can also pull the dynamic and placebo effect estimates from the output.

```{r}
## Creating data set of placebo (in-time) effects. Note the time is negated to match usual event time notation.
placebo <- as_tibble(dCdH) %>% dplyr::select(starts_with("placebo")) %>%
  pivot_longer(cols=everything(),
               names_to="Lead",
               names_prefix="placebo_",
               values_to="Estimate") %>%
  mutate(`Event Time`=-1*as.numeric(Lead))
## Creating data set of single first-switch estimate.
estimate <- tibble(`Event Time`=1,
                   Estimate=dCdH$effect["treatment"])
## Creating data set of dynamic effects. Note the time is incremented by 1 to match usual event time notation where 1 is the first period on treatment.
dynamic <- as_tibble(dCdH) %>% dplyr::select(starts_with("dynamic")) %>%
  pivot_longer(cols=everything(),
               names_to="Lag",
               names_prefix="dynamic_",
               values_to="Estimate") %>%
  mutate(`Event Time`=as.numeric(Lag)+1)
## Combined event time data set from this method:
dCdH_comb <- bind_rows(placebo %>% dplyr::select(-Lead),
                       estimate,
                       dynamic %>% dplyr::select(-Lag))
dCdH_comb %>% arrange(`Event Time`)
```

```{r}
## Plot the results of first-switching analysis:
#| fig-cap: "Event-study results using the First-Switching Estimator from de Chaisemartin and d'Haultfoeuille (2020) on the effect of state employee COVID-19 vaccine mandates, event times from -10 to 8."
#| fig-alt: "A single event-study plot showing effect estimates at each lead/lag time from -10 to 8. The event times less than 0 tend to have small negative estimates (between 0 and -0.125), except for time -9 which has an estimate of nearly 0.25. The event time of 1 has an estimate slightly below 0 as well. The estimates from event times 2 through 4 are around -0.15, from event times 5 to 7 are around -0.40, and from event time 8 is around -0.3."

ggplot(dCdH_comb) + geom_point(mapping=aes(x=`Event Time`, y=Estimate)) +
  theme_bw()
```

If you install the `DIDmultiplegtDYN` package, a faster implementation of standard errors and more standard interface is available through the `did_multiplegtDYN` function. Note that this package requires Java and at least R 4.3.3, and may cause errors in other settings.

```{r}
## Run the above analysis with the DIDmultiplegtDYN package instead:
# install.packages("DIDmultiplegtDYN")
require(DIDmultiplegtDYN)

dCdH_dyn <- did_multiplegt_dyn(df=Vax_firstWeek,
                               outcome="D1P",
                               group="StateID",
                               time="MMWR_week",
                               treatment="mandate",
                               effects=8,
                               placebo=8,
                               cluster="StateID",
                               graph_off=FALSE)
dCdH_dyn
```

## Additional Options

Other methods and specifications are possible, along with incorporating covariates into some of these methods. The review papers listed in the slides are a good place to start to investigate these.

## Discussion Question

Is this question and its associated data set a good fit for a DID/staggered adoption analysis? Why or why not?
